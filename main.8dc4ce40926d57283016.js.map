{"version":3,"sources":["webpack:///./task-1.js","webpack:///./task-2.js","webpack:///./task-3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","reject","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","canProcess","obj","id","timeoutCbFn","logSuccess","logError","warn","amount","catch"],"mappings":"2JAEMA,EAAQ,SAAAC,GAIZ,OAHgB,IAAIC,SAAQ,SAAUC,GACpCC,YAAW,kBAAMD,EAAQF,KAAKA,OAK5BI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCZXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GASjC,OARgB,IAAIb,SAAQ,SAAUC,EAASa,GAI7Cb,EAHqBW,EAASG,KAAI,SAAAC,GAAI,OACpCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,MAG/DF,EAAOE,UAMLb,EAAS,SAAAc,GAAY,OAAIZ,QAAQa,MAAMD,IAK7CN,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GC3BpB,IAMTgB,EAAkB,SAAAC,GACtB,IALiCC,EAAKC,EAKhCxB,GAL2BuB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IASpD,OAHgB,IAAIrB,SAAQ,SAACC,EAASa,GACpCZ,WAKJ,SAAqBD,EAASa,EAAQM,EAAatB,GACjD,IAAM4B,EAAaH,KAAKE,SAAW,GAC7BE,EAAM,CACVC,GAAIR,EAAYQ,GAChBxB,KAAMN,GAGJ4B,EACFzB,EAAQ0B,GAERb,EAAOM,EAAYQ,IAfRC,CAAY5B,EAASa,EAAQM,EAAatB,GAAQA,OAmBjE,IAAMgC,EAAa,SAAC,GAAiB,IAAfF,EAAe,EAAfA,GAAIxB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,eAA2BsB,EAA3B,iBAA8CxB,EAA9C,OAGI2B,EAAW,SAAAH,GACfvB,QAAQ2B,KAAR,gCAA6CJ,EAA7C,8BAMFT,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAAO1B,KAAKuB,GAAYI,MAAMH,GAEhEZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAAO1B,KAAKuB,GAAYI,MAAMH,GAEhEZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,KAAM1B,KAAKuB,GAAYI,MAAMH,GAE/DZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAAO1B,KAAKuB,GAAYI,MAAMH,K","file":"main.8dc4ce40926d57283016.js","sourcesContent":["export default 'task-1';\r\n\r\nconst delay = ms => {\r\n  const promise = new Promise(function (resolve) {\r\n    setTimeout(() => resolve(ms), ms);\r\n  });\r\n  return promise;\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n","export default 'task-2';\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  const promise = new Promise(function (resolve, reject) {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n    resolve(updatedUsers);\r\n    reject(user);\r\n  });\r\n\r\n  return promise;\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","export default 'task-3';\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  const promise = new Promise((resolve, reject) => {\r\n    setTimeout(timeoutCbFn(resolve, reject, transaction, delay), delay);\r\n  });\r\n  return promise;\r\n};\r\n\r\nfunction timeoutCbFn(resolve, reject, transaction, delay) {\r\n  const canProcess = Math.random() > 0.3;\r\n  const obj = {\r\n    id: transaction.id,\r\n    time: delay,\r\n  };\r\n\r\n  if (canProcess) {\r\n    resolve(obj);\r\n  } else {\r\n    reject(transaction.id);\r\n  }\r\n}\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n"],"sourceRoot":""}